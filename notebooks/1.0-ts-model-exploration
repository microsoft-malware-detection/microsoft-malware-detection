{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "13032688",
   "metadata": {},
   "source": [
    "# Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "5ad8df8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "import pickle as pk\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "62037795",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator\n",
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn import preprocessing\n",
    "label_ecoder = preprocessing.LabelEncoder()\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "cc9f5de5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "504fc1ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "class EstimatorHandler(BaseEstimator):\n",
    "    def __init__(self, estimator = DummyClassifier()):\n",
    "        self.estimator = estimator\n",
    "\n",
    "    def fit(self, X, y=None, **kwargs):\n",
    "        self.estimator.fit(X, y)\n",
    "        return self\n",
    "\n",
    "    def predict(self, X, y=None): #Will adjust depends on ROC and AUROC CURVES \n",
    "        return self.estimator.predict(X)\n",
    "\n",
    "\n",
    "    def predict_proba(self, X):\n",
    "        return self.estimator.predict_proba(X)\n",
    "\n",
    "\n",
    "    def score(self, X, y):\n",
    "        return self.estimator.score(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c6394f07",
   "metadata": {},
   "outputs": [],
   "source": [
    "## MIGHT NEED \n",
    "class MLPipeline:\n",
    "    def __init__(self, classifier: ClassifierHandler):\n",
    "        self.classifier = classifier\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "c1514c76",
   "metadata": {},
   "outputs": [],
   "source": [
    "def encode_category_columns(columns,label_ecoder,df):\n",
    "    for column in columns:\n",
    "        df[column] = label_ecoder.fit_transform(df[column])\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f0b4968",
   "metadata": {},
   "source": [
    "# DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2e78d458",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Datatypes for each column\n",
    "##interim_data_types = pd.read_csv('../data/interim/interim_data_types.csv', index_col='col_name')['type'].to_dict()\n",
    "##df = pd.read_csv('../data/interim/microsoft_malware_data.csv', dtype=interim_data_types)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a6ea2a18",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2a9074d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle_data = '../data/pickle/df.pkl'\n",
    "df.to_pickle(\"../data/pickle/df.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8c5f26b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_pickle(pickle_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "50f6b5d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(columns=['HasDetections'])\n",
    "y = df['HasDetections']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "0cb0d330",
   "metadata": {},
   "outputs": [],
   "source": [
    "numeric_columns = df.select_dtypes(include=np.number).columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "ad5f7e52",
   "metadata": {},
   "outputs": [],
   "source": [
    "category_columns = df.select_dtypes('category').columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "31ca9def",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_numeric = X[numeric_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "e8f92ebb",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_encoded = encode_category_columns(category_columns,label_ecoder,X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68b8628f",
   "metadata": {},
   "source": [
    "## 1.0 PCA "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f7c4df",
   "metadata": {},
   "source": [
    "### 1.1 PCA 1\n",
    "Numeric Columns Only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "e473751f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pk.dump(pca_numeric,open(\"../data/pickle/pca_numeric.pkl\",\"wb\"))\n",
    "#pk.dump(pca_numeric_encoder,open(\"../data/pickle/pca_numeric_encoder.pkl\",\"wb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "bd2dfc92",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pickle_handler():\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb1993b2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "10eba315",
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_numeric = PCA().fit(X_numeric)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "7f23fbe1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.xlabel('Number of components')\n",
    "plt.ylabel('Cumulative explained variance');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e295337f",
   "metadata": {},
   "source": [
    "### 1.2 PCA 2 \n",
    "Numeric + Label Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "600cfa44",
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_numeric_encoder = PCA().fit(X_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "4aae6fc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.xlabel('Number of components')\n",
    "plt.ylabel('Cumulative explained variance');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c00da1f",
   "metadata": {},
   "source": [
    "## MODEL ENTIRE DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "aa446afb",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Name__param\n",
    "pipeline = Pipeline([\n",
    "    ('clf', EstimatorHandler()),\n",
    "])\n",
    "parameters = [\n",
    "    {\n",
    "        'clf': (EstimatorHandler()),\n",
    "    }\n",
    "    \n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "892b4b6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('clf', EstimatorHandler())])"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline.fit(X_encoded,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "7a26ccf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = pipeline.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "0172721f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tyronsamaroo/opt/anaconda3/envs/microsoft-malware-detection/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/Users/tyronsamaroo/opt/anaconda3/envs/microsoft-malware-detection/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.00      0.00      0.00   4276661\n",
      "        True       0.50      1.00      0.67   4286833\n",
      "\n",
      "    accuracy                           0.50   8563494\n",
      "   macro avg       0.25      0.50      0.33   8563494\n",
      "weighted avg       0.25      0.50      0.33   8563494\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tyronsamaroo/opt/anaconda3/envs/microsoft-malware-detection/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "048fe3f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "models = [\n",
    "          ('Dummy', DummyClassifier()), \n",
    "          ('LogReg', LogisticRegression()), \n",
    "          ('RF', RandomForestClassifier()),\n",
    "          ('KNN', KNeighborsClassifier()),\n",
    "          ('SVM', SVC()), \n",
    "          ('GNB', GaussianNB()),\n",
    "          ('XGB', XGBClassifier())\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1ae1643",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tyronsamaroo/opt/anaconda3/envs/microsoft-malware-detection/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/Users/tyronsamaroo/opt/anaconda3/envs/microsoft-malware-detection/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/Users/tyronsamaroo/opt/anaconda3/envs/microsoft-malware-detection/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.00      0.00      0.00   4276661\n",
      "        True       0.50      1.00      0.67   4286833\n",
      "\n",
      "    accuracy                           0.50   8563494\n",
      "   macro avg       0.25      0.50      0.33   8563494\n",
      "weighted avg       0.25      0.50      0.33   8563494\n",
      "\n"
     ]
    }
   ],
   "source": [
    "names = []\n",
    "results = []\n",
    "model_info = []\n",
    "for name, model in models:\n",
    "    model.fit(X,y)\n",
    "    y_pred = model.predict(X)\n",
    "    res = classification_report(y,y_pred)\n",
    "    print(res)\n",
    "    names.append(name)\n",
    "    results.append(res)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad593bfe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24c43aab",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23fa4543",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
