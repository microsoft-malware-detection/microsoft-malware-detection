Background
Bad actors with appetite to cause harms, intentionally write malicious software (malware) to infect computing devices. Once a device is infected, the malware may stay latent until a certain period. If the malware remains undetected, a bad actor may decide to exploit the device itself or the information of a victim that may have been saved on the device for tentative gains. Microsoft reports that over one billion enterprise and consumer customers may be at risk of being infected. Therefore, it is highly desired to develop robust and efficient malware detection techniques that may even help in preventing the infection of computing devices. 
Malware detections have traditionally been done, by scanning computing devices (programs and applications) and their files for potential malicious software.  The customary host-based techniques are - signature-based detection, checksumming, and whitelisting. In signature-based detection, the antivirus products compare malware unique signature from real-time scans to existing local/remote in-memory patterns. Checksumming enables the verification of malware unique signature, by calculating the Cyclic Redundancy Check (CRC) to detect if there was the occurrence of an error in the transmission of the data. Finally, in whitelisting the administrator of the computing device has clearly defined a list of allowed applications. Applications that are not whitelisted are then blocked. 
Currently, malware authors release mutation engines that are used to create new malware from previously released ones that may be hard to be detected by Antivirus [6]. Due to the dynamic generation of malware, customary Antiviruses struggle to detect day-one malicious software. Therefore, machine learning can help in improving the performance of malware detection programs to increase the security profile of Windows machine.
[7] uses machine learning to detect malware using an energy efficient method. A client-server architecture was presented. The server, hosted on Amazon’s cloud platform, includes a repository of clean and malicious malware on which a detection engine gets continuously trained. Many instances of the detection engine can be spawn at a time to scale the service in high demand, but each instance has its own queue. When a client sends a request to the server to investigate whether a file is clean or malicious, the request is automatically queued. The detection engine pulls the request from the corresponding queue and performs the evaluation. Once the detection engine completes the job, it sends a response back to the client. 
In this project, we use telemetry data characterizing different windows machines instead of features extracted from files scanned.

Conclusion
Machine learning techniques can be used to adapt with the dynamic nature of malware generation to help enhance current security mechanisms effectiveness in detecting malicious software. Our objective was two-fold, obtaining high precision to mitigate customer impact and reducing false negatives. We used random forest, naïve bayes, and gradient boosting to classify whether a windows machine is infected by various family of malware. 
We designed multiple experiments to train multiple models for this classification problem. We perform hyperparameter tuning to optimize our models and cross-validation. 
[Naïve Bayes, Random Forest, and Gradient Boosting classifier have respectively such values. Naïve Bayes performed better as it help minimize the false negatives, which was our main objective.] 

Tyron: I added the paragraph in red just as a place holder. I think that you should clearly describe the results of the area under the ROC curve and say why Naïve Bayes was the best classifier that minimize the recall.

References
[6] Bruschi, D., Martignoni, L., Monga, M. (2006). Detecting Self-mutating Malware Using Control-Flow Graph Matching. In: Büschkes, R., Laskov, P. (eds) Detection of Intrusions and Malware & Vulnerability Assessment. DIMVA 2006. Lecture Notes in Computer Science, vol 4064. Springer, Berlin, Heidelberg. https://doi.org/10.1007/11790754_8
[7] Qublai K. Ali Mirza, Irfan Awan, Muhammad Younas (2018). CloudIntell: An intelligent malware detection system. Future Generation Computer Systems, Volume 86, 2018, Pages 1042-1053

